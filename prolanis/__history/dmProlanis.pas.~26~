unit dmProlanis;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.PG,
  FireDAC.Phys.PGDef, FireDAC.VCLUI.Wait, FireDAC.Comp.UI, Data.DB,
  FireDAC.Comp.Client, FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf,
  FireDAC.DApt, JvDataSource, FireDAC.Comp.DataSet;

type
  TdataProlanis = class(TDataModule)
    FDConnection1: TFDConnection;
    fdgxwtcrsr1: TFDGUIxWaitCursor;
    fdQ1Kelompok: TFDQuery;
    ds1Kelompok: TJvDataSource;
    fdQBuka: TFDQuery;
    fdQ1JenisProgram: TFDQuery;
    ds1JenisProgram: TJvDataSource;
    fdQKegiatan: TFDQuery;
    dsKegiatan: TJvDataSource;
    fdQPeserta: TFDQuery;
    dsPeserta: TJvDataSource;
    fdQLUKelompok: TFDQuery;
    dsLUKelompok: TJvDataSource;
    fdQLUJnsKegiatan: TFDQuery;
    dsLUJnsKegiatan: TJvDataSource;
    fdQPasien: TFDQuery;
    dsPasien: TJvDataSource;
    fdQPesertaAdding: TFDQuery;
    dsPesertaAdding: TJvDataSource;
    fdCmd1: TFDCommand;
    fdQPesertaTerakhir: TFDQuery;
    procedure fdQPesertaBeforeDelete(DataSet: TDataSet);
    procedure fdQPesertaBeforePost(DataSet: TDataSet);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  dataProlanis: TdataProlanis;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}
uses Vcl.Dialogs;

procedure TdataProlanis.fdQPesertaBeforeDelete(DataSet: TDataSet);
begin
showMessage('tes');
fdQPeserta.AbortJob(true);
//Dataset.;
end;

procedure TdataProlanis.fdQPesertaBeforePost(DataSet: TDataSet);
begin
DataSet.Cancel;
end;

end.
