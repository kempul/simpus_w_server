unit brDokterU;

interface
   uses Dialogs, Classes, brCommonsU, System.SysUtils, System.StrUtils, Uni, UniScript;
type

  brDokter = class(bridgeCommon)
    private
//    FUri : string;
//    FFormat
      UniConnection : TUniConnection;
      UniQuery : TUniQuery;
      UniSQL : TUniSQL;
      UniScript0 : TUniScript;

    procedure jalankanScript(script : TStringList);

    public
    function getDokter (mulaiDari : string = '0' ; jumlahData : string = '10') : Boolean;
    constructor Create;
    destructor destroy;
    procedure masukkanGetDokter;
//    property Uri : string;
  end;


implementation
     uses SynCommons;
{ brDokter }

constructor brDokter.Create;
begin
  inherited Create;

end;

destructor brDokter.destroy;
begin

inherited;
end;

function brDokter.getDokter(mulaiDari : string; jumlahData : string): Boolean;
var sql0, sql1 : string;

begin
Result := False;
parameter_bridging('DOKTER', 'GET');
//ShowMessage(uri);
Uri := StringReplace( Uri, '{start}', mulaiDari,  []);
Uri := StringReplace(Uri, '{limit}', jumlahData, []);
//ShowMessage(uri);

Result:= httpGet(uri);

if Result then masukkanGetDokter;

end;

procedure brDokter.jalankanScript(script: TStringList);
begin
try
    UniConnection := TUniConnection.Create(nil);
    UniConnection.Server := pghost;
    UniConnection.Database := pgdb;
    UniConnection.Port := StrToInt(pgport);
    UniConnection.Username := pguser;
    UniConnection.Password := pgpasswd;
    UniConnection.ProviderName := 'PostgreSQL';
    UniConnection.Connected:=true;

    UniScript0 := TUniScript.Create(nil);
    UniScript0.Connection := UniConnection;


UniScript0.SQL.Clear;
UniScript0.SQL.Assign(script);
UniScript0.Execute;
finally
  UniScript0.Free;
  UniConnection.Free;

end;

end;

procedure brDokter.masukkanGetDokter;
var dataDokter, dataList : Variant;
    i : Integer;
    tSl : TStringList;
    sqlx0, sqlx1 : string;
    sqlDel0, sqlDel1, sql0, sql1 : string;
    kdDokter, nmDokter : string;
begin

   sqlDel0 := 'delete from simpus2.dokter where kd_dokter = %s and nama = %s;';
   sql0 := 'insert into simpus2.dokter(kd_dokter, nama) values(%s, %s);';
   tsL := TStringList.Create;
   try
   dataDokter := _jsonFast(tsResponse.Text);

   // simpsn respon
   sqlx0 := 'insert into simpus2.a_bpjs_resp(uri, terkirim, terjawab) values(%s, %s, %s);';
   sqlx1 := Format(sqlx0,[quotedStr(uri), quotedstr(''), quotedStr(tsResponse.Text)]);
   tSl.Add(sqlx1);

   dataList := _JsonFast(dataDokter.response.list);
   for I := 0 to dataDokter.response.list._count - 1 do
     begin
       kdDokter := dataList.Value(i).kdDokter;
       nmDokter := dataList.Value(i).nmDokter;
//       ShowMessage(nmDokter);
       sqlDel1 := Format(sqlDel0,[QuotedStr(kdDokter), QuotedStr(nmDokter)]);
       tSl.Add(sqlDel1);

       sql1 := Format(sql0, [QuotedStr(kdDokter), quotedStr(nmDokter)]);
       tSl.Add(sql1);
//       showMessage(sqlDel1);
//       showMessage(sql1);
     end;
   finally
     jalankanScript(tSl);
     FreeAndNil(tSl);
   end;
end;

end.
